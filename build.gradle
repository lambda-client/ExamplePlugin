version project.modVersion
group project.modGroup

wrapper { gradleVersion = '6.8.3' }

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        useIR = true
    }
}

compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
    options.encoding = 'UTF-8'
}

repositories {
    maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    maven { url = 'https://impactdevelopment.github.io/maven/' }
    maven { url = "https://jitpack.io" }
}


minecraft {
    mappings channel: 'stable', version: '39-1.12'

    runs {
        client {
            workingDirectory project.file('run')

            property 'fml.coreMods.load', 'com.lambda.client.mixin.MixinLoaderForge'
            property 'mixin.env.disableRefMap', 'true' // Disable refmap so we don't get trolled by Baritone

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

configurations {
    jarLibs
    // Force choosing the correct nightly build because Mac OS chooses an invalid one
    all {
        resolutionStrategy {
            force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2855'
    implementation(files("lib/lambda-2.04.xx-dev-api.jar"))

    implementation('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: 'commons-io'
        exclude module: 'gson'
        exclude module: 'guava'
        exclude module: 'launchwrapper'
        exclude module: 'log4j-core' // we want to exclude this as well because 0.7.11 includes it too new for MC
    }

    // Hacky way to get mixin work
    annotationProcessor('org.spongepowered:mixin:0.8.2:processor') {
        exclude module: 'gson'
    }

    // Kotlin libs
    // kotlin-stdlib-common and annotations aren't required at runtime
    implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version") {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }

    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version") {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }

    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version") {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }

    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version") {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version") {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }

    // Add them back to compileOnly (provided)
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
    compileOnly 'org.jetbrains:annotations:20.1.0'

    // This Baritone will NOT be included in the jar
    implementation 'com.github.cabaletta:baritone:1.2.14'
    
    // Add your dependicies below
    // jarLibs 'com.lambda:example:1.0.0'
}

mixin {
    defaultObfuscationEnv 'searge'
    add sourceSets.main, 'mixins.lambda.refmap.json'
}
